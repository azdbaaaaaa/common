// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

//指定包名

package common_v1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AppIdEnum int32

const (
	AppIdEnum_AppIdDefault AppIdEnum = 0
	AppIdEnum_Lighthouse   AppIdEnum = 100
)

var AppIdEnum_name = map[int32]string{
	0:   "AppIdDefault",
	100: "Lighthouse",
}

var AppIdEnum_value = map[string]int32{
	"AppIdDefault": 0,
	"Lighthouse":   100,
}

func (x AppIdEnum) String() string {
	return proto.EnumName(AppIdEnum_name, int32(x))
}

func (AppIdEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type AreaIdEnum int32

const (
	AreaIdEnum_AreaIdDefault AreaIdEnum = 0
	AreaIdEnum_Android       AreaIdEnum = 30
	AreaIdEnum_Ios           AreaIdEnum = 40
	AreaIdEnum_Web           AreaIdEnum = 99
	AreaIdEnum_H5            AreaIdEnum = 98
)

var AreaIdEnum_name = map[int32]string{
	0:  "AreaIdDefault",
	30: "Android",
	40: "Ios",
	99: "Web",
	98: "H5",
}

var AreaIdEnum_value = map[string]int32{
	"AreaIdDefault": 0,
	"Android":       30,
	"Ios":           40,
	"Web":           99,
	"H5":            98,
}

func (x AreaIdEnum) String() string {
	return proto.EnumName(AreaIdEnum_name, int32(x))
}

func (AreaIdEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

type LanguageEnum int32

const (
	LanguageEnum_ZH LanguageEnum = 0
	LanguageEnum_EN LanguageEnum = 1
	LanguageEnum_ES LanguageEnum = 2
	LanguageEnum_IN LanguageEnum = 3
	LanguageEnum_TL LanguageEnum = 4
	LanguageEnum_MS LanguageEnum = 5
	LanguageEnum_KO LanguageEnum = 6
)

var LanguageEnum_name = map[int32]string{
	0: "ZH",
	1: "EN",
	2: "ES",
	3: "IN",
	4: "TL",
	5: "MS",
	6: "KO",
}

var LanguageEnum_value = map[string]int32{
	"ZH": 0,
	"EN": 1,
	"ES": 2,
	"IN": 3,
	"TL": 4,
	"MS": 5,
	"KO": 6,
}

func (x LanguageEnum) String() string {
	return proto.EnumName(LanguageEnum_name, int32(x))
}

func (LanguageEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

type CommonResp struct {
	// 错误码 ex:999999
	Result int32 `protobuf:"varint,1,opt,name=Result,proto3" json:"result"`
	// 错误消息
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"message"`
	// error debug信息
	Err string `protobuf:"bytes,3,opt,name=Err,proto3" json:"err,omitempty"`
	// request id
	Rid                  string   `protobuf:"bytes,4,opt,name=Rid,proto3" json:"rid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResp) Reset()         { *m = CommonResp{} }
func (m *CommonResp) String() string { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()    {}
func (*CommonResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *CommonResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResp.Merge(m, src)
}
func (m *CommonResp) XXX_Size() int {
	return m.Size()
}
func (m *CommonResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResp proto.InternalMessageInfo

func (m *CommonResp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *CommonResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommonResp) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *CommonResp) GetRid() string {
	if m != nil {
		return m.Rid
	}
	return ""
}

type InParam struct {
	AppId                int32    `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	AreaId               int32    `protobuf:"varint,2,opt,name=areaId,proto3" json:"areaId,omitempty"`
	Version              int32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	UserId               int64    `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	DeviceId             string   `protobuf:"bytes,5,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	ClientIp             string   `protobuf:"bytes,6,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
	Channel              string   `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
	Source               string   `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	UserIp               string   `protobuf:"bytes,9,opt,name=userIp,proto3" json:"userIp,omitempty"`
	Language             string   `protobuf:"bytes,10,opt,name=language,proto3" json:"language,omitempty"`
	Country              string   `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`
	AuthorId             int64    `protobuf:"varint,12,opt,name=authorId,proto3" json:"authorId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InParam) Reset()         { *m = InParam{} }
func (m *InParam) String() string { return proto.CompactTextString(m) }
func (*InParam) ProtoMessage()    {}
func (*InParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *InParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InParam.Merge(m, src)
}
func (m *InParam) XXX_Size() int {
	return m.Size()
}
func (m *InParam) XXX_DiscardUnknown() {
	xxx_messageInfo_InParam.DiscardUnknown(m)
}

var xxx_messageInfo_InParam proto.InternalMessageInfo

func (m *InParam) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *InParam) GetAreaId() int32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *InParam) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *InParam) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *InParam) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *InParam) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *InParam) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *InParam) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *InParam) GetUserIp() string {
	if m != nil {
		return m.UserIp
	}
	return ""
}

func (m *InParam) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *InParam) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *InParam) GetAuthorId() int64 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

type OutParam struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	SubCode              int32    `protobuf:"varint,2,opt,name=subCode,proto3" json:"subCode,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutParam) Reset()         { *m = OutParam{} }
func (m *OutParam) String() string { return proto.CompactTextString(m) }
func (*OutParam) ProtoMessage()    {}
func (*OutParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}
func (m *OutParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutParam.Merge(m, src)
}
func (m *OutParam) XXX_Size() int {
	return m.Size()
}
func (m *OutParam) XXX_DiscardUnknown() {
	xxx_messageInfo_OutParam.DiscardUnknown(m)
}

var xxx_messageInfo_OutParam proto.InternalMessageInfo

func (m *OutParam) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OutParam) GetSubCode() int32 {
	if m != nil {
		return m.SubCode
	}
	return 0
}

func (m *OutParam) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("common.v1.AppIdEnum", AppIdEnum_name, AppIdEnum_value)
	proto.RegisterEnum("common.v1.AreaIdEnum", AreaIdEnum_name, AreaIdEnum_value)
	proto.RegisterEnum("common.v1.LanguageEnum", LanguageEnum_name, LanguageEnum_value)
	proto.RegisterType((*CommonResp)(nil), "common.v1.CommonResp")
	proto.RegisterType((*InParam)(nil), "common.v1.InParam")
	proto.RegisterType((*OutParam)(nil), "common.v1.OutParam")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xdf, 0x6a, 0xdb, 0x3e,
	0x14, 0xc7, 0xeb, 0xb8, 0xb1, 0x9b, 0x93, 0xf4, 0x87, 0x2a, 0x7e, 0x0c, 0xaf, 0xb0, 0xa4, 0x64,
	0x0c, 0x4a, 0x59, 0x5a, 0xc6, 0xd8, 0xd5, 0xae, 0xd2, 0xae, 0xa5, 0x66, 0xfd, 0x33, 0xd4, 0xc1,
	0xa0, 0x77, 0x8a, 0xad, 0x3a, 0x06, 0x5b, 0x32, 0xb2, 0x14, 0x96, 0x27, 0xd9, 0x5e, 0x66, 0xf7,
	0xbb, 0xdc, 0x13, 0x84, 0xd1, 0xdd, 0xe5, 0x29, 0x86, 0x24, 0x3b, 0x1b, 0xec, 0xea, 0xe8, 0x73,
	0xbe, 0xe7, 0xe8, 0x7b, 0x7c, 0x84, 0x61, 0x90, 0x88, 0xb2, 0x14, 0xfc, 0xb8, 0x92, 0x42, 0x09,
	0xdc, 0x6b, 0x68, 0xf1, 0x6a, 0x7f, 0x92, 0xe5, 0x6a, 0xae, 0x67, 0xc7, 0x89, 0x28, 0x4f, 0x32,
	0x91, 0x89, 0x13, 0x5b, 0x31, 0xd3, 0x0f, 0x96, 0x2c, 0xd8, 0x93, 0xeb, 0xdc, 0x9f, 0xfe, 0x55,
	0xce, 0xf8, 0x42, 0x2c, 0x2b, 0x29, 0x3e, 0x2f, 0x5d, 0x53, 0x32, 0xc9, 0x18, 0x9f, 0x2c, 0x68,
	0x91, 0xa7, 0x54, 0xb1, 0x93, 0x7f, 0x0e, 0xee, 0x8a, 0xf1, 0x17, 0x0f, 0xe0, 0xcc, 0xfa, 0x13,
	0x56, 0x57, 0x78, 0x0c, 0x01, 0x61, 0xb5, 0x2e, 0x54, 0xe4, 0x1d, 0x78, 0x87, 0xdd, 0x53, 0x58,
	0xaf, 0x46, 0x81, 0xb4, 0x19, 0xd2, 0x28, 0xf8, 0x05, 0x84, 0xd7, 0xac, 0xae, 0x69, 0xc6, 0xa2,
	0xce, 0x81, 0x77, 0xd8, 0x3b, 0xed, 0xaf, 0x57, 0xa3, 0xb0, 0x74, 0x29, 0xd2, 0x6a, 0xf8, 0x39,
	0xf8, 0xe7, 0x52, 0x46, 0xbe, 0x2d, 0xd9, 0x5b, 0xaf, 0x46, 0xbb, 0x4c, 0xca, 0x97, 0xa2, 0xcc,
	0x15, 0x2b, 0x2b, 0xb5, 0x24, 0x46, 0xc5, 0x4f, 0xc1, 0x27, 0x79, 0x1a, 0x6d, 0xdb, 0xa2, 0x70,
	0xbd, 0x1a, 0xf9, 0x32, 0x4f, 0x89, 0xc9, 0x8d, 0xbf, 0x75, 0x20, 0x8c, 0xf9, 0x07, 0x2a, 0x69,
	0x89, 0xff, 0x87, 0x2e, 0xad, 0xaa, 0x38, 0x75, 0x53, 0x11, 0x07, 0xf8, 0x09, 0x04, 0x54, 0x32,
	0x1a, 0xa7, 0x76, 0x8e, 0x2e, 0x69, 0x08, 0x47, 0x10, 0x2e, 0x98, 0xac, 0x73, 0xc1, 0xad, 0x7b,
	0x97, 0xb4, 0x68, 0x3a, 0x74, 0xcd, 0x64, 0xec, 0x1c, 0x7d, 0xd2, 0x10, 0xde, 0x87, 0x9d, 0x94,
	0x2d, 0xf2, 0x84, 0xc5, 0x69, 0xd4, 0x35, 0xb3, 0x90, 0x0d, 0x1b, 0x2d, 0x29, 0x72, 0xc6, 0x55,
	0x5c, 0x45, 0x81, 0xd3, 0x5a, 0x36, 0x4e, 0xc9, 0x9c, 0x72, 0xce, 0x8a, 0x28, 0xb4, 0x52, 0x8b,
	0xc6, 0xa9, 0x16, 0x5a, 0x26, 0x2c, 0xda, 0xb1, 0x42, 0x43, 0x9b, 0x09, 0xaa, 0xa8, 0xe7, 0xf2,
	0x8e, 0x8c, 0x4b, 0x41, 0x79, 0xa6, 0xcd, 0x56, 0xc1, 0xb9, 0xb4, 0x6c, 0x5d, 0x84, 0xe6, 0x4a,
	0x2e, 0xa3, 0x7e, 0xe3, 0xe2, 0xd0, 0x74, 0x51, 0xad, 0xe6, 0xc2, 0x7c, 0xd1, 0xc0, 0x7e, 0xd1,
	0x86, 0xc7, 0x04, 0x76, 0x6e, 0xb5, 0x72, 0xfb, 0xc3, 0xb0, 0x9d, 0x88, 0x94, 0x35, 0xeb, 0xb3,
	0x67, 0x73, 0x6b, 0xad, 0x67, 0x67, 0x26, 0xed, 0xd6, 0xd7, 0xa2, 0x51, 0x9a, 0xd7, 0x74, 0xaf,
	0x47, 0x5a, 0x3c, 0x9a, 0x40, 0x6f, 0x6a, 0x56, 0x7f, 0xce, 0x75, 0x89, 0x11, 0x0c, 0x2c, 0xbc,
	0x63, 0x0f, 0x54, 0x17, 0x0a, 0x6d, 0xe1, 0xff, 0x00, 0xae, 0xf2, 0x6c, 0xae, 0xe6, 0x42, 0xd7,
	0x0c, 0xa5, 0x47, 0x17, 0x00, 0x53, 0xfb, 0x24, 0xb6, 0x7e, 0x0f, 0x76, 0x1d, 0xfd, 0x69, 0xe8,
	0x43, 0x38, 0xe5, 0xa9, 0x14, 0x79, 0x8a, 0x86, 0x38, 0x04, 0x3f, 0x16, 0x35, 0x3a, 0x34, 0x87,
	0x4f, 0x6c, 0x86, 0x12, 0x1c, 0x40, 0xe7, 0xf2, 0x0d, 0x9a, 0x1d, 0x5d, 0xc0, 0xe0, 0xaa, 0x59,
	0x86, 0xbd, 0x29, 0x80, 0xce, 0xfd, 0x25, 0xda, 0x32, 0xf1, 0xfc, 0x06, 0x79, 0x36, 0xde, 0xa1,
	0x8e, 0x89, 0xf1, 0x0d, 0xf2, 0x4d, 0xfc, 0x78, 0x85, 0xb6, 0x4d, 0xbc, 0xbe, 0x43, 0x5d, 0x13,
	0xdf, 0xdf, 0xa2, 0xe0, 0xf4, 0xd9, 0xf7, 0xc7, 0xa1, 0xf7, 0xe3, 0x71, 0xe8, 0xfd, 0x7c, 0x1c,
	0x7a, 0x5f, 0x7f, 0x0d, 0xb7, 0xee, 0xfb, 0xc7, 0x6f, 0x37, 0x7f, 0xdf, 0x2c, 0xb0, 0xbf, 0xc4,
	0xeb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xbe, 0xfe, 0xdc, 0x9f, 0x03, 0x00, 0x00,
}

func (m *CommonResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rid) > 0 {
		i -= len(m.Rid)
		copy(dAtA[i:], m.Rid)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Rid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AuthorId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.AuthorId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.UserIp) > 0 {
		i -= len(m.UserIp)
		copy(dAtA[i:], m.UserIp)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UserIp)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ClientIp) > 0 {
		i -= len(m.ClientIp)
		copy(dAtA[i:], m.ClientIp)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ClientIp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UserId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if m.Version != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if m.AreaId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.AreaId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SubCode != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.SubCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovCommon(uint64(m.Result))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Rid)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovCommon(uint64(m.AppId))
	}
	if m.AreaId != 0 {
		n += 1 + sovCommon(uint64(m.AreaId))
	}
	if m.Version != 0 {
		n += 1 + sovCommon(uint64(m.Version))
	}
	if m.UserId != 0 {
		n += 1 + sovCommon(uint64(m.UserId))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.UserIp)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AuthorId != 0 {
		n += 1 + sovCommon(uint64(m.AuthorId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OutParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommon(uint64(m.Code))
	}
	if m.SubCode != 0 {
		n += 1 + sovCommon(uint64(m.SubCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCode", wireType)
			}
			m.SubCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
