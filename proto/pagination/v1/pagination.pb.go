// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pagination/v1/pagination.proto

//指定包名

package pagination_v1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SortOrder int32

const (
	SORT_ORDER_UNSPECIFIED SortOrder = 0
	SORT_ORDER_DESC        SortOrder = 1
	SORT_ORDER_ASC         SortOrder = 2
)

var SortOrder_name = map[int32]string{
	0: "SORT_ORDER_UNSPECIFIED",
	1: "SORT_ORDER_DESC",
	2: "SORT_ORDER_ASC",
}

var SortOrder_value = map[string]int32{
	"SORT_ORDER_UNSPECIFIED": 0,
	"SORT_ORDER_DESC":        1,
	"SORT_ORDER_ASC":         2,
}

func (x SortOrder) String() string {
	return proto.EnumName(SortOrder_name, int32(x))
}

func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_87f4a4742dbda0b7, []int{0}
}

type PaginationReq struct {
	Page                 int32                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize             int32                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sort                 map[string]SortOrder `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=pagination.SortOrder"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PaginationReq) Reset()         { *m = PaginationReq{} }
func (m *PaginationReq) String() string { return proto.CompactTextString(m) }
func (*PaginationReq) ProtoMessage()    {}
func (*PaginationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4a4742dbda0b7, []int{0}
}
func (m *PaginationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaginationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaginationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaginationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaginationReq.Merge(m, src)
}
func (m *PaginationReq) XXX_Size() int {
	return m.Size()
}
func (m *PaginationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PaginationReq.DiscardUnknown(m)
}

var xxx_messageInfo_PaginationReq proto.InternalMessageInfo

func (m *PaginationReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PaginationReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PaginationReq) GetSort() map[string]SortOrder {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (*PaginationReq) XXX_MessageName() string {
	return "pagination.PaginationReq"
}

type TimeRange struct {
	Start                int64    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  int64    `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeRange) Reset()         { *m = TimeRange{} }
func (m *TimeRange) String() string { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()    {}
func (*TimeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f4a4742dbda0b7, []int{1}
}
func (m *TimeRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRange.Merge(m, src)
}
func (m *TimeRange) XXX_Size() int {
	return m.Size()
}
func (m *TimeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRange proto.InternalMessageInfo

func (m *TimeRange) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *TimeRange) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (*TimeRange) XXX_MessageName() string {
	return "pagination.TimeRange"
}
func init() {
	proto.RegisterEnum("pagination.SortOrder", SortOrder_name, SortOrder_value)
	proto.RegisterType((*PaginationReq)(nil), "pagination.PaginationReq")
	proto.RegisterMapType((map[string]SortOrder)(nil), "pagination.PaginationReq.SortEntry")
	proto.RegisterType((*TimeRange)(nil), "pagination.TimeRange")
}

func init() { proto.RegisterFile("pagination/v1/pagination.proto", fileDescriptor_87f4a4742dbda0b7) }

var fileDescriptor_87f4a4742dbda0b7 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xf4, 0xc6, 0x36, 0xc5, 0x1f, 0xa2, 0x58, 0xcb, 0x9f, 0x31, 0x62, 0xb1, 0xc2, 0xa1, 0x15,
	0x48, 0xb6, 0x5a, 0x2e, 0x88, 0x9f, 0x03, 0x4e, 0x8c, 0xd4, 0x4b, 0x13, 0xad, 0xcb, 0xa5, 0x17,
	0x6b, 0x83, 0x57, 0x66, 0x45, 0xea, 0x0d, 0xce, 0xc6, 0x52, 0xf3, 0x04, 0x3c, 0x02, 0x8f, 0xc3,
	0x31, 0xc7, 0x3e, 0x01, 0x82, 0x84, 0xa7, 0xe8, 0x09, 0x79, 0xad, 0x36, 0xae, 0x2f, 0x9e, 0x9d,
	0x99, 0x6f, 0x3c, 0x9f, 0xbc, 0x40, 0x66, 0xac, 0x10, 0x25, 0x53, 0x42, 0x96, 0x51, 0x7d, 0x10,
	0x6d, 0x4f, 0xe1, 0xac, 0x92, 0x4a, 0x62, 0xd8, 0x32, 0xfe, 0xe3, 0x9a, 0x4d, 0x45, 0xce, 0x14,
	0x8f, 0xae, 0x40, 0x6b, 0xf2, 0x1f, 0x14, 0xb2, 0x90, 0x1a, 0x46, 0x0d, 0x6a, 0xd9, 0xfe, 0x3f,
	0x04, 0x77, 0xc7, 0xd7, 0xd3, 0x94, 0x7f, 0xc7, 0x4f, 0xc1, 0x9a, 0xb1, 0x82, 0x7b, 0x28, 0x40,
	0xfb, 0x76, 0xbc, 0x73, 0x19, 0x5b, 0x7e, 0x2f, 0x30, 0xa8, 0x26, 0xf1, 0x1e, 0x38, 0xcd, 0x3b,
	0x9b, 0x8b, 0x25, 0xf7, 0x7a, 0xda, 0x01, 0x97, 0xf1, 0x8e, 0x6f, 0x7b, 0x3f, 0xf6, 0x02, 0x83,
	0xde, 0x6e, 0xc4, 0x54, 0x2c, 0x39, 0xfe, 0x00, 0xd6, 0x5c, 0x56, 0xca, 0x33, 0x03, 0x73, 0xff,
	0xce, 0xe1, 0x8b, 0xb0, 0xd3, 0xf9, 0xc6, 0xe7, 0xc2, 0x54, 0x56, 0x2a, 0x29, 0x55, 0x75, 0x1e,
	0x5b, 0xab, 0xdf, 0xcf, 0x0d, 0xaa, 0xc7, 0xfc, 0x63, 0x70, 0xae, 0x05, 0xec, 0x82, 0xf9, 0x8d,
	0x9f, 0xeb, 0x42, 0x0e, 0x6d, 0x20, 0x7e, 0x05, 0x76, 0xcd, 0xa6, 0x8b, 0xb6, 0xc2, 0xee, 0xe1,
	0xc3, 0x6e, 0x7c, 0x33, 0x37, 0xaa, 0x72, 0x5e, 0xd1, 0xd6, 0xf3, 0xb6, 0xf7, 0x06, 0xf5, 0x13,
	0x70, 0x4e, 0xc4, 0x19, 0xa7, 0xac, 0x2c, 0x38, 0x7e, 0x06, 0xf6, 0x5c, 0xb1, 0x4a, 0xe9, 0x44,
	0x53, 0xaf, 0xd8, 0x6f, 0x56, 0x6c, 0x59, 0xfc, 0x04, 0x4c, 0x5e, 0xe6, 0x3a, 0xba, 0x23, 0x36,
	0xdc, 0xcb, 0x71, 0x5b, 0x4b, 0xc7, 0x63, 0x1f, 0x1e, 0xa5, 0x23, 0x7a, 0x92, 0x8d, 0xe8, 0x30,
	0xa1, 0xd9, 0xe7, 0xe3, 0x74, 0x9c, 0x0c, 0x8e, 0x3e, 0x1d, 0x25, 0x43, 0xd7, 0xc0, 0xf7, 0xe1,
	0x5e, 0x47, 0x1b, 0x26, 0xe9, 0xc0, 0x45, 0x18, 0xc3, 0x6e, 0x87, 0xfc, 0x98, 0x0e, 0xdc, 0x5e,
	0x7c, 0x7a, 0xf1, 0x97, 0x18, 0xab, 0x35, 0x41, 0x17, 0x6b, 0x82, 0xfe, 0xac, 0x09, 0xfa, 0xb9,
	0x21, 0xc6, 0xaf, 0x0d, 0x41, 0xab, 0x0d, 0x41, 0xa7, 0xef, 0x0b, 0xa1, 0xbe, 0x2e, 0x26, 0xe1,
	0x17, 0x79, 0x16, 0xb1, 0x65, 0x3e, 0x61, 0xfa, 0x89, 0x16, 0x4a, 0x4c, 0xa3, 0xf6, 0x57, 0xde,
	0xb8, 0x19, 0xef, 0xb6, 0xa7, 0xac, 0x3e, 0x98, 0xdc, 0xd2, 0x96, 0xd7, 0xff, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x6b, 0xa0, 0x8f, 0xd4, 0x3f, 0x02, 0x00, 0x00,
}

func (m *PaginationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaginationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sort) > 0 {
		for k := range m.Sort {
			v := m.Sort[k]
			baseI := i
			i = encodeVarintPagination(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPagination(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPagination(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PageSize != 0 {
		i = encodeVarintPagination(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintPagination(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimeRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.End != 0 {
		i = encodeVarintPagination(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintPagination(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPagination(dAtA []byte, offset int, v uint64) int {
	offset -= sovPagination(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PaginationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovPagination(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovPagination(uint64(m.PageSize))
	}
	if len(m.Sort) > 0 {
		for k, v := range m.Sort {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPagination(uint64(len(k))) + 1 + sovPagination(uint64(v))
			n += mapEntrySize + 1 + sovPagination(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimeRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovPagination(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovPagination(uint64(m.End))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPagination(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPagination(x uint64) (n int) {
	return sovPagination(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PaginationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPagination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPagination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPagination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sort == nil {
				m.Sort = make(map[string]SortOrder)
			}
			var mapkey string
			var mapvalue SortOrder
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPagination
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPagination
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPagination
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPagination
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPagination
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= SortOrder(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPagination(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPagination
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Sort[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPagination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPagination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPagination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPagination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPagination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPagination(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPagination
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPagination
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPagination
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPagination
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPagination
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPagination
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPagination        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPagination          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPagination = fmt.Errorf("proto: unexpected end of group")
)
